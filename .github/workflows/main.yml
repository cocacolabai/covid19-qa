name: CI and staging deploy
on: [pull_request, push]
jobs:
  check-qa:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Load cache from ~/.cache
      uses: actions/cache@v1
      with:
        path: ~/.cache  # Includes transformers' downloaded models, and other things such as pip downloaded packages.
        key: ${{ runner.os }}-cache-${{ hashFiles('qa/**/*') }}
        restore-keys: |
          ${{ runner.os }}-cache-
    - name: Load Conda cache
      uses: actions/cache@v1
      with:
        path: /usr/share/miniconda
        key: ${{ runner.os }}-conda-${{ hashFiles('qa/environment.yml') }}
        # Don't use any alternative key, as the conda env is already installed if there's a cache hit,
        # as we don't want to use an old conda env then.
    - name: Setup Conda
      uses: s-weigand/setup-conda@v1
      with:
        activate-conda: false
    - name: Install Conda packages
      run: |
        if ! ls /usr/share/miniconda/envs/covid19-qa; then
          cd qa
          conda env create -f environment.yml
        fi
    - name: Format the corpus
      run: |
        source activate covid19-qa
        python corpus-creator/corpus_creator.py
    - name: Run QA main
      run: |
        source activate covid19-qa
        cd qa
        python main.py --ignore-es
  build:
    needs: [check-qa]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Load Docker cache
        uses: actions/cache@v1
        with:
          path: /var/lib/docker
          key: ${{ runner.os }}-docker-${{ hashFiles('**/*ocker*') }}
          restore-keys: |
            ${{ runner.os }}-docker-
      # Running the production stack would otherwise try to actually serve root-reserved ports (<1000)
      # and assign domains. So build and run the dev env and then we build the production env.

      # FIXME: GH actions runs out of memory, as the QA image is too heavy.
#      - name: Build and run the dev env
#        run: docker-compose up --build -d

      # TODO: needs env vars.
#      - name: Build the production env
#        run: docker-compose -f docker-compose.yml -f docker-compose.prod.yml build

      # TODO: push the built docker image
  deploy:
    if: github.ref == 'refs/heads/prod'
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          version: 290.0.1
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true
      - run: gcloud info
      # TODO: deploy
